Es6模块的搭建步骤：
    （git init/git add */git commit -m ''）
    1.npm init -y
    2.sinopia
    3.npm install --save-dev babel-cli
    4.npm install --save-dev babel-preset-latest
      npm install --save babel-polyfill
    5.vim .babelrc
        {
            "presets":["latest"]
        }
    6.vim package.json
        { "build":"babel src --out-dir dist"}

    7.mkdir src dist
    8.vim src/obj.js
    9.babel src --out-dir dist
        (babel src/obj.js转换)
    10.npm run build
    11.node dist/obj.js
let命令
    用来声明变量。与var 类似，但是也有不同的地方：
    1）有区域性，只在所在的代码块内有效
    2）不存在变量提升
    3）暂时性死区，在代码块内，使用let命令声明变量之前，该变量都不可用
    4）不允许重复声明
const命令
    const声明一个只读变量，一旦声明，常量的值就不能改变
    特点：
        1）一旦声明，就必须立即初始化，不能留到以后赋值。
        2）块级作用域，只在声明所在的块级作用域内有效
        3）暂时性死区
        4）不允许重复
解构：
    Es6允许按照一定的模式，从数组或对象中取值，对变量进行赋值，这被称为解构
       1） 数组的解构模式
            let [a,b,c]=[1,2,3];
       不完全解构
            let [a,[b],d]=[1,[2,3],4];
       集合解构
            let [a,...b]=[1,2,4,6,6];
       默认值
            let [x,y='n']=['a'];
       默认值也可以为函数
            function f(){console.log('aaa');}
            let[x=f()]=[1];
       2)对象的解构赋值
       对象的属性没有次序，变量必须与属性同名，才能取到正确的值
            let{foo,bar}={foo,:'aaa',bar:'bbb'}
       如果变量名与属性名不一至，必须写成以下样式：
            var {foo:baz}={foo:'aaa',baz:'bbb'};
       对象的解构赋值是以下形式的简写
            let{foo:foo,bar:bar}={foo:'aaa',bar:'bbb'};
       嵌套解构
            let obj{ p:['hello',{y:'world'}]};
            let{p:[x,{y}]}=obj;//x=hello,y=world
       默认值
            let{x:y=3}={};//y=3
        字符串的解构赋值
        解构时，字符串被转换成类数组对象
            let[a,b,c,d,e]='hello';
        对数组的属性解构
            let{length:len}='hello';//len=5;
        数值和布尔值的解构赋值
            let{toString:s}=123; //s===Number.prototype.tostring true
            let{toString:s}=true;//s===Number.prototype.toString true
        函数参数的解构赋值
        基本语法
            function add([x,y]){ return x+y}
            add([1,2]);
        默认值
            function move({x=0,y=0}={}){  return[x,y]}
            move({x:3,y:8});//[3,8]
            move({x:3}); //[3,0]
            move({});//[0,0]
            move();//[0,0]
        常见用途
            let x=1;let y=2;[x,y]=[y,x];
        从函数返回多个值
            function example() { return [1, 2, 3]; } 
            let [a, b, c] = example();
        函数参数的定义
            function f([x, y, z]) { ... } 
            f([1, 2, 3]);
        提取 JSON 数据
            let jsonData = { id: 42, status: "OK", data: [867, 5309] }; 
            let { id, status, data: number } = jsonData;
        输入模块的指定方法
            const { SourceMapConsumer, SourceNode } = require("source-map");
        函数参数的默认值
           jQuery.ajax = function (url, { 
            async = true, cache = true, global = true, 
            beforeSend = function () {}, 
            complete = function () {}, 
            // ... more config 
            }) { // ... do stuff }; 
        遍历MAP结构
            var map=new map();
            map.set('first','hello');
            map.set('second','world');
            for(let[key,value] of map){
                console.log(key+'is'+value);
            }
１．对象扩展
    1)属性
    Es6允许直接写入变量和函数，作为对象的属性和方法
        let name = "terry";
        let age = 12;
        let gender = "male"
        {
            name,
            age,
            gender
        }

    2)函数
        {
            name,
            sayName(){

            }
        }
    3)属性表达式
    ES6允许字面量定义对象时，可以把表达式写在【】里
        {
            ['first'+'name']:'terry'
        }
        =>
        {
            firstname:'terry'
        }
        for(var key in obj){//key代表属性名
            var val = obj[key];
        }
    2) Object API
        Object.is(val1,val2)//判断两个值是否相等
            与===类似，但是由不同的地方：
                NaN NaN //true
                +0  -0 //false
        Object.assign(target,o1,o2)
            将o1,o2中的可遍历的属性合并到target对象中，并且返回target
        Object.setPrototypeOf(obj,prototype);
            直接为obj设定__proto__的值
        Object.getPrototypeOf(obj);
            获取obj中__proto__的值
        Object.keys(obj)
            返回obj属性名的数组
        Object.values(obj)
            返回obj属性值的数组
        Object.entries(obj)
            返回obj键值对组成的数组的数组
            [[key,val],[key,val]]
２．函数扩展
    1)函数参数的默认值
        $.ajax(url,{
            method:'GET',
            dataType:'json',//text
            contentType:'www',
            async:true
        })
        1.　自己添加业务逻辑
        function ajax(url,options){
            if(!options.method){
                options.method='GET'
            }
        }
        2. 解构
        function test([a,b=0]){
            return a+b;
        }
        test([1]);
        3. 参数默认值
        function test(a,b=0){

        }
        test(1);
        function ajax(url,{
            method='GET',
            async=true
        }){
            
        }

        function test(a,b=1,c=2){

        }
        test.length //１

    2)rest参数
        定义在形式参数上，用于接受剩余的实参
        function test(a,...b){

        }
        test(1,2,3,4);
        test.length //1
    3)箭头函数
        v=>v    
        --->
        function(v){
            return v;
        }
        或：
        (v)={return v};

        (item,index)=>{
            if(index%2 == 0){
                console.log(item);
            }
        }
        --->
        function (item,index){
            if(index%2 == 0){
                console.log(item);
            }
        }

        在箭头函数中不推荐使用内部属性 this,arguments
        如果需要使用内部属性，建议不要使用箭头函数。
            var obj = {name:'terry'}

            function callMethod(cb){
                cb();
            }

            //callMethod(function(){
            callMethod(()=>{
                console.log(this);        
            });
３．数组扩展
    1)　扩展运算符
        Math.max();

        var a = 19;
        var b = 18;
        var c = 21;
        Math.max(a,b,c);
        Math.max.call(this,a,b,c)

        var arr = [19,18,21]
        想要求出arr中的最大值
        
        Math.max(...arr)
        ＝》
        Math.max.apply(this,arr)

        将字符串转换为一个数组
        [..."hello"]

    2) Array API的扩展
        Array.from(param)
            param取值有两种情况
                1.类数组对象
                2.可遍历对象
                    Set
                    Map
                    string
                    ....
        Array.of()
            Array.of(3);
            Array.of(3.5);
            Array.of(true);
    3) Array原型API的扩展
        var arr = Array.from("hello world");
        arr.find();
            用法与forEach非常类似，参数为回调函数，回调函数有三个参数，item,index,arr
            返回值为回调函数返回true的第一个回调函数。当前遍历的值返回

            arr.find((item)=>{
                return item.age>16;
            });
        arr.findIndex()
        
        arr.fill(val,beginInex,endIndex)
        ////用给定的值，填充一个数组。val 要填的值，begin表示填充的开始位置，end表示填充的结束位置
        arr.keys()//是对键名的遍历，返回一个遍历器的对象
        arr.values()//是对键值的遍历，返回一个遍历器对象
        arr.entries()//是对键值对的遍历
            以上三个方法均返回迭代器对象，迭代器对象有一个next()方法
            该方法会返回{value:,done},value为遍历的内容，down是否遍历结束
            可以使用for...of来遍历迭代器
        调用迭代：
            console.log(arr.keys.next());//返回{value:0..,done:false/true}
        调用迭代器，迭代values
            valiter=arr.values();
            for(let val of valiter/entriesiter){
                console.log(val);
            }//entries返回数组

            arr本身也是可迭代（iterable）
            for(let val of arr){
                console.log(val);
            }
            访问arr本身迭代器
            arr[Symbol.iterator]();
            有迭代器的就可以用for(){};
            如：Array
                String
                Set
                Map
                类数组对象
        includes();该方法返回一个布尔值，表示某个数组是否包含给定的值。
            arr.includes(val)，如果数组中包含val，返回true,否则返回false.
            includes使用Object.is() 进行判断

            switch(a){
                case v:
                    break;
            }//使用全等对比
*************************************************
4. Set
    类似数组，但是set集合中的元素是不可以重复的，本身是一个构造函数。
    1)　初始化
        var set = new Set();
    2)  添加元素
        set.add(1);
        set.add(1);
        set.add(2);
    3) 获取set集合大小
        set.size;
        console.log(set.size);
    4) 遍历Set
        for(let v of set){
            console.log(let);
        }
    5) 数组去重
        es6:
            [...new Set(arr)]
            Array.from(new Set(arr))
        es5:
            function quchong(arr){
                return arr;
            }
    例子：去重
       1） var arr=[1,1,1,2,4,5,7,3,2,6];
        console.log([...new Set(arr)]);//返回数组
        2）console.log(Array.from(new Set(arr)));
    6)  API
        set.size
        set.has()
        set.add()
        set.clear()
        set.delete()
        set.keys()
5. Map
    1)实例化
        var map =new Map();
    2)添加元素
        map.set(key,val);
            key的取值可为任意数据类型，如果重复，其对应val会后者覆盖前者
            val的取值可为任意数据类型
            例如：map.set(1001,['terry','larry','2']);
                map.set(1002,{name:'tom'});
    3)通过key获取val
        map.get(key);
    4)通过key删除
        map.delete(key);
    5)清除
        map.clear();
    6)遍历
        for(let[key,val] of map){

        }
    7) 将对象转换map结构
        var map = new Map([[key,val],[key2,val2]]);
        var map = new Map(Object.entries(obj))
****************************************************
6. promise
            是异步编程的一种解决方案。从语法上说，promise是一个对象
        从他中可以获取异步操作的消息。它提供了统一的API，各种异步操作都可以用同样的方法进行处理。
        有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。
           promise 构造函数接受一个函数作为参数，该函数的两个参数为
        resolve 和reject,也是两个函数。
        resolve函数的作用是将promise对象的状态从‘未成功’变为‘成功’，在异步操作成功是调用，
        并将异步操作的结果当做参数传递出去。
        reject函数的作用是将promise对象的状态从‘未完成’变为‘失败’
        并将异步操作报出的错误，作为参数传递出去。
        promise实例生成后，可以用then方法分别指定resolve,reject 
        状态的回掉函数。

1.var promise = new Promise(function(resolve,reject){
      resolve(data)

      reject(err)

    });
    promise.then(function(data){},function(){})


    getJSON(url,success,err){
      ajax
        if(){
          success()
        }else {
          err()
        }
    }
    getJson(url,function,function)

    then(function(){
      return a;
    }).then(function(a){
      a就是上一个then回调函数的返回值
    })
    then()参数建议只有一个回调函数，如果想要处理失败事务交给catch(),想要添加一个始终执行的方法，可以添加到finally()中。


2.var p = Promise.all([p1,p2,p3]);
        p.then(function(data){
            //data是p1，p2，p3都为resolve时返回值组成的集合。

        })
        p.catch(function(data){
            当p1,p2,p3不全为resolve时，p的状态理解为rejected
        })；
3.promise.race();
        var p=promise.race([p1,p2,p3]);
        //状态与率先状态改变的元素保持一致，
        p.then(function(data){});
        p.catch(function(data){});
4.promise.resolve(v)
        将参数v转换为一个promise对象,状态为resolved
5.promise.reject(v);
        //将参数转换为一个promise 对象，状态为rejected
    例子：
    1）ajax的包装
    function getJSON(url,successHandler,errorHandler){
        var request = new XMLHttpRequest();
        request.open('GET',url,true);
        request.responseType = 'json';
        request.setRequestHeader('Accept','application/json');
        request.send();

        request.onreadystatechange = function(){
            if(request.readyState == 4){
                console.log(request);
                if(request.status == 200){
                    successHandler(request.response);
                }else {
                    errorHandler(request.status)
                }
            }
        }

    }
2）promise的包装
function getJSON(url){
    return new Promise(function(resolve,reject){
        var request = new XMLHttpRequest();
        request.open('GET',url,true);
        request.responseType = 'json';
        request.setRequestHeader('Accept','application/json');
        request.send();
    
         request.onreadystatechange = function(){
             if(request.readyState == 4){
                 console.log(request);
                 if(request.status == 200){
                    console.log("----pajax---");
                    resolve(request.response);
                }else {
                    reject(request.status)
                }
            }
         }

    });
}

***************************************************
模块化
模块的主要功能有两个命令组成：export和import.
模块内部的方法和属性是私有的，其他模块不能访问，如果想让其他模块访问
，必须暴露接口。

module.exports.name='';
module.exports.age=12;
module.exports={name:'',age:12}
模块的引用
require('./module1');
模块化（es6）
模块定义
export 
export 命令用于规定模块的对外接口，必须与内部变量建立一一对应的对应关系
    1)export let a=1;
    2)export let sayHello=function(){};
        let a=1;
        function sayHello(){};
    3)export {a,sayHello}
    4）export {a as m}//m相当于a的别名
export default
    //一个模块中，默认导出只能有一个
    1)export default {};
    2)export default function(){}
模块的引用
import 命令用于输入其他模块提供的功能。如果多次重复执行一句import语句，只会执行一次
    //解构导入
    1）import {a,b,c} from '路径/模块名'
    //重命名导入
    2）import {a as m} from './';
    //模块的整体加载    
    3）import * as obj from './module'

export与import的复合写法
  export ...from...
  =>import...from ...(先导入)
    export ........(再导出)

export{foo，bar} from './...';
=>
    import {foo,bar} from './...';
    export {foo,bar};
例子：
db
    index.js
        export {studentDB} from './studentDB'
        export {courseDB} from './courseDB'
     studentDB.js 
     courseDB.js
    route
        scrouter.js
          import * as db from 'db'
          db.studentDB.findAll();
************************************************
Class
是构造函数的语法糖
 1.定义
 class 类名{
     //构造函数（实例属性）{}
     constructor(name,age){}
     //实例方法
     //静态方法     
 }
    //静态属性
    类名.属性名
例子：
    class Animal{
        //用于定义实力属性
        constructor(name,age){//constructor方法是累的默认方法，生成实例时自动调用该方法。一个类必须有一个
                                //constructor方法，如果没有显示定义，系统会默认添加
            //this指向当前实例对象
            this.name=name;
            this.age=12
            Animal.number ++;
        }
        //用于定义实例方法（原型）
        sayName(){
            //this 指向当前实例对象
            console.log(this.name);
        }
        //static 关键字用于定义静态方法（构造函数）,该方法不会被实例继承，直接通过类调用。
        static showNumber(){
            //this 指向的是构造函数（类）
            console.log(''+this.number);
        }
    }
    //用于定义静态属性（构造函数），class内部只有静态方法，无静态属性
    Animal.number=0;
2.使用
    var animal=new Animal();
    //创建对象时一定会调用构造函数，
    //构造函数可以缺省，这是系统会给当前类提供一个默认的构造函数
3.继承extends
     class Dog extends Animal{
         constructor (name,age,color){
             //调用父类构造函数
             super(name,age);//必须有super,继承父类的this对象，子类没有自己的this对象
             this.color=color;
         }
         sayColor(){
             console.log("this color is",this.color);
         }
     }
     var dog =new Dog();
     效果：
     1）静态方法和属性的继承
       Dog.number
       Dog.showNumber();
    2)实例属性和方法的继承
        dog.sayName();
4.super
  在构造函数中
    函数，调用父类的构造函数，返回子类的实例
        //super内部的this指向子类，相当于A.prototype.constructor.call(this)
    super();
    对象，普通方法中指向父类的原型对象，静态方法中，指向父类
        //由于super指向父类的原型对象，所有定义在父类实例上的方法和实例是无法用super调用
    super.sayName();        
类的 prototype 属性和 __proto__ 属性
    class 作为构造函数的语法糖，同时有 prototype 属性和 __proto__ 属性，因此同时存在
两条继承链
1 . 子类的 __proto__ 属性，表示构造函数的继承，总是指向父类。
2 . 子类 prototype 属性的 __proto__ 属性，表示方法的继承，总是指向父类的 prototype
属性。   
    B 的实例继承A的实例
    Object.setPrototypeOf(B.prototype,A.prototype);
