数据库开启：server mysql status
数据库打开：server mysql start
数据库关闭：server mysql stop
退出：quit或\q或exit

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
node
    1. 安装node
    2. windows/linux环境变量的配置
    3.　$node --version
    4. 使用方式
        $ node hello.js
        $ node 
        > var str = "hello"
        undefined
        > str
        hello
    5. 模块化机制
        module 是每个模块都具有的一个内置对象，用来表示当前模块
        module1.js
            module.exports　＝　function(){}
        module2.js  
            var module2 = require('./module1.js');
    6. 内置模块
        node本身提供的，在使用之前无需安装
        path
        url
        例子：
                var url=require('url');
        　　　 var a='http://192.168.120.130.8080/courses/query?credit=2&name=java';
        　　　 var urlObj=url.parse(a);
        　　　 console.log(urlObj);
        　　　 //请求地址
        　　　 var pathname=urlObj.pathname;
        　　　 var query=urlObj.query;
        　　　 console.log(pathname,query);
        querystring
            querystring.parse(查询字符串);
            querystring.stringify(obj);
        　　例如：
        　　　　　var qs=require('querystring');
        　　　　　var query='credit=2&name=Java';
        　　　　　//将查询字符串转换为对象{credit:2,name:Java}
        　　　　　var qso=qs.parse(query);
        　　　　　console.log(qso);
        　　　　　console.log("查询字符串：",qs.stringify(qso));
        　　　　　返回值;
        　　　　　{ credit: '2', name: 'Java' }
        　　　　　查询字符串： credit=2&name=Java
        　　　　　chaxun
HTTP
        http
        例子：
        var http=require('http');
        var url=require('url');
        var querystring=require('querystring');
        var server=http.createServer(function(req,resp){
        //获取用户请求路经
        var pathname=url.parse('req.url').pathname;
        var method=req.method;
        switch(pathname){
        case '/students/save':
                //获取学生信息
                var studentInfo=new Buffer(0);
                if(method=='POST'){
                        req.on('data',function(data){
                        studentsInfo+=data;
                        });
                        req.on('end',function()
                        {
                        console.log(studentInfo);
                        });
                }else{
                        var query=querystring.parse(url.parse(req.url).qurey);
                        console.log(qurey);
                }
                break;
        default:
                resp.writeHead(404,'not found',{
                'Content-Type':'text/html;charset=utf-8'
                });
                resp.write('html....');
                resp.end();
        }
        });
        server.listen(8080,function(){
        console.log('端口好为8080的服务已经开启.....');});
    7.
NPM
    0. 安装node
        安装node的时候会默认安装npm
       升级npm
        $ npm install npm@latest -g
    1. 查看npm 版本
        $ npm --version
    2.   
    1) 配置
        npm config list;    查看npm的配置信息
        registry    注册中心
            默认指向https:registry.npmjs.org
        1) 安装淘宝镜像
             npm install -g cnpm --registry=https://registry.npm.taobao.org
             或者：
        		npm set registry=https://registry.npm.taobao.org
                全局安装，将模块安装到系统中/usr/local
                改变/usr/local权限(npm install -g)
                $ npm config get prefix
                $ sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}


            npm install mysql
                本地安装，将模块安装到当前目录的node_modules目录下。
        
            cnpm config list
                registry 淘宝注册中心地址。
            
            npm(本地->淘宝)
            cnpm
            本地仓库的搭建
            cnpm install -g sinopia
            sinopia
                ~/.config/sinopia/config.yaml
            修改配置信息
                url:https://registry.npm.taobao.org
            重新启动sinopia
            修改npm的默认注册中心地址
                npm set registry=http://localhost:4873
    2) 应用
        npm install <模块>@<version>
        npm init
            初始化一个模块
            package.json
            {
                "name":
                "version"
                "main"
                "script":{
                    "test":"node index.js"
                }
                dependencies:{
                    
                }
            }
        npm publish <模块名>
            x.x.x
            1.0.1
            1.3.0
            2.0.0

$ npm install
    安装所有项目依赖的模块，依赖的模块定义在 package.json 中,
    通过添加一些参数改变这个特性
        npm install -D/--save-dev
            (devDependencies)
        npm install --no-save
            不会保存依赖信息
    从 node_modules 中删除不需要的模块,不仅删除 node_modules 中的依赖，还需要删除 package.json 中的信息，可以使用—save 参数
        npm uninstall [-g]
    全局更新依赖的模块
        $ npm update <module_name>
××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

 第三方模块（mysql）
        由其他结构提供的，使用之前必须安装
        使用：
            1)安装
                $ npm install mysql
            2)使用
                var mysql = require('mysql');
            3)应用
                var connection = mysql.createConnection({
                    host,
                    port,
                    user,
                    password,
                    database
                });

                connection.connect(function(err){
                    if(err){
                        //错误数据库错误
                    } 
                });
                // 品牌　款式 匹数　价钱区间
                var sql = "select * from product"+
                " where 1 = 1"
                +" and pinpai = 格力"
                +" and kuanshi=圆柱形"
                
                connection.query(sql,function(err,results,fields){});
                connection.query(sql,[],function(err,results,fields){});
                例子：
                   var mysql=require('mysql');
                    //创建链接对象
                    var connection=mysql.createConnection({
                    host:'127.0.0.1',
                    port:'3306',
                    user:'root'
                    password:'root',
                    database:'web1701'

                    });
                    //3.进行链接
                    connection.connecte();
                    //4.进行数据库操作（增删改查）
                    var sql='select * from students';
                    connection.query(sql,function(err,results,fields){
                            if(err){
                            throw err
                            }else{
                                    console.log(JSON.stringify(results));
                                    }
                            });
                    console.log(end...);
                    //5.关闭数据库链接
                    connection.end(); 

            连接池
                var pool = mysql.createPool({

                });
                pool.getConnection(function(err,connect){
                    connect.query(sql,function(err,results){
                        connect.release();
                    })
                });
            例子：
                //1.加载mysql模块
                var mysql=require('mysql');
                //2.创建链接池
                var pool=mysql.createPool({
                        database:'web1701',
                        user:'root',
                        password:'root'
                        });
                //3.从连接池中获取链接对象
                pool.getConnection(function(err,connection){
                        if(err){
                        throw err
                        }else{
                        var sql="select * from course";
                        connection.query(sql,function(err,results){
                                if(err){
                                throw err;
                                }else{
                                        console.log(results);
                                        }
                                        //释放链接对象到链接池中
                                        connection.release();
                                        //关闭链接池
                                        pool.end();
                                });
                        }
                });               

第三方模块（express）
    0. mvc模式
        model       模型  数据模型（json）
        view        视图  students.html
                        jade(jsp)
        controller  控制器 createServer()
    express
        jsp(servlet>html)

        mc
        
 1. express
    express是对http模块的封装
    1)安装
    npm install express
    2)加载模块
    var express = require('express');
    3)创建服务器对象，设置路由信息
    var app = express();
    app.get('/',function(req,resp){
        //参数
        req.query
        req.body 默认为undefined(body-parser)
        
        resp.send();

    });
    4) 设置监听
    app.listen(3000,function(){

    });


    路由中间件
        学生模块
        routers/studentsRouter.js


        var express=require('express');
        var studentsRouter = express.Router();//创建路由中间件对象
        studentsRouter.get('/findById',function(req,resp){//定义中间件
            var body = req.body;
            resp.send(body);
        });
        studentsRouter.get('/findAll',function(req,resp){

            var body = req.body;
            studentsDB.findAll(function(results){
            resp.send(JSON.stringify(results));
        });
        module.exports = studentsRouter;

        主模块　app.js
        var express=require('express');
        var bodyParser=require('body-parser');
        var studentsRouter = require('');
        var app=express();
        app.use(bodyParser.urlencoded({extended:true}));
        app.use('/students',studentsRouter);//使用中间件
        app.listen(8080,function(){
            console.log("端口号wei8080的服务器已经开启");
        });
********************************************************************************************************   
(做项目)    
脚手架
    1. 
        全局安装脚手架
        	$npm install -g express-generator
        生成项目
			$ express myapp
		安装所有依赖
			$ cd myapp 
			$ npm install
		启动项目
			$ npm run start;
************************************************************************************************************
（做项目）     
GIT
是目前世界上最先进的分布式版本控制系统。
像是一个目录，目录里边所有的文件
都可以被git管理，每个文件的修改，删除，GIT都能跟踪，以便任何时候可以追踪历史
，或还原某个版本。
下载
sudo apt-get install git
创建本地仓库
express/mkdir app  //express app创建项目app的脚手架
cd app
git init   初始化
vim Readme.md
管理文件
1.把文件添加到仓库
git add */readme.md
vim readme.md
把文件提交到仓库，使用-m制定信息
git commit -m 'this is...'
可以时刻查看仓库的当前状态
git status
查看对仓库进行的具体修改
git diff
查看当前所有版本
git log
使用git reset 将版本退回到任意版本
git reset --hard ++++
使用git reflog 查看历史命令
git reflog
创建分支
git branch dev
查看分支
git branch
切换分支
git checkout dev/master
    查看当前分支状况
    git branch
合并分支
git checkout master
git merge dev
文件删除
    1）确定要从版本库中删除
        git rm readme.md
        git commit -m 'confirm delete'
    2)误删，版本库里还有，需恢复
        git checkout --readme.md
远程仓库
git remote add origin http://github.com/pluslicy/app.git
把本地仓库的内容送到远程仓库上
git push origin master
/也可以将分支的内容送到远程仓库上
git push origin dev
如果远程仓库上有初始文件或新版本文件，提交前先更新
git pull origin master 
git push origin master
拷贝远程仓库的内容
git clone http://......
git checkout -b dev origin/dev

***********************************************************************************************************
Es6
    babel
        一般采用本地安装
        2.本地使用
        本地安装babel-cli,babel-preset-latest
            &npm install babel-cli --save-dev
            &npm install babel-preset-latest --save-dev
            $npm install babel-polyfill --save
        添加配置文件.babelrc
        {
            "presets":["latest"]
        }
        修改package.json文件
        vim package.json
        "script":{
                .......,
                "build":"babel src --out-dir dist"
        }
        使用
        1.babel转换
        babel hello.js
        将转换后的结果打印道控制台
        2.npm run build

    Es6模块的搭建步骤：
        （git init/git add */git commit -m ''）
        1.npm init -y
        2.sinopia
        3.npm install --save-dev babel-cli
        4.npm install --save-dev babel-preset-latest
        5.vim .babelrc{ "presets":["latest"]}
        6.vim package.json{ "build":"babel src --out-dir dist"}
        7.mkdir src dist
        8.vim src/obj.js 
        [9.babel src --out-dir dist]
        10.npm run build
        11.node dist/obj.js
***************************************************************************************************************
 ajax
        异步　javascript xml(json)
        页面的局部更新

        XMLHttpRequest

        var request = new XMLHttpRequest();
        request.open("GET","http://localhost:3000/students/gtAll?id=1001",true);
        //request.open的第一个参数为提交方式，第二个是请求的内容，第三个是是否异步
        request.send();//post发送的数据
        request.onreadystatechange = function(){//就绪状态码
            if(request.readyState == 4){
                //0代表请求还没有初始化，1代表服务器链接已经建立成功，
                //2代表服务器端已经接收到请求了，3代表正在处理请求，4代表服务器端给出了回应。
                if(request.status == 200){//状态码
                    var data = request.responseText;//返回字符串信息
                    var arr = JSON.parse(data);
                } else {
                    // 403　被拒绝
                    // 404  找不到请求内容
                    // 500  后台异常
                }
            }
        } 
***************************************************************************************************************
jquery
简写$
jquery 就是js的一个库（就是别人给我们封装好的js文件）。
jquery 简洁的语法和跨平台的兼容性，极大的简化了js开发人员遍历HTML文档，操作DOM，处理事件，执行动画和开发AJAX 
    优势：
    1.轻量级
    2.强大的选择器
    3.出色的DOM操作封装
    4.可靠地事件处理机制
    5.完善的Ajax,$.ajax()无需关心复杂的浏览器兼容性和XMLHttpRequest对象的创建和使用。
    6.不污染顶级变量
    7.出色的浏览器兼容性
    8.链式操作方式
 获取dom
    1)核心选择器
        *
        h1  table p
        .nav
        #nav
        .nav,#nav,p
    2）层次选择器
        table>tbody
        table tbody
        .next~ 之后所有兄弟
        .next~ .three next后的兄弟中的three
        .next+下一个直接兄弟
        &dom.nextALL();后边所有的
        $dom.prevALL();上边所有的
        var $dom=$("span[name]");
        var $dom=$("span[name*='o']");所有包含o的
        var $dom=$("span[name^o]");以o开头的
        var $dom=$("span[name$e]");以e结尾的
        var $dom=$("form>input[password]");
        .toArray();
        .get();
        .each();
        .children();找孩子节点到所有的孩子节点
        .
    3）过滤器
    遍历dom
        &dom.addClass("one");
        &dom.after(); 在后面插入
        &dom.append();把..追加到&dom孩子的后面&tbody.append('&tr');
        &dom.appendto();把元素&dom追加到..里边 &tr.appendto('&tbody');
        .clone();
        .css();&('div').css("background",'red');
        .detach();移除孩子节点
        .empty();移除所有孩子节点
        .height();
        .html();
        .prepend();
        .remove();移除一个节点
        .removeAttr();移除一个属性
        .removeClass();
        .val();
    2.$
    script src=""
        $是JQUERY的简写
        $（）；=>jquery();
           参数：
           1.function(){}该匿名函数在文档的主体结构加载完毕之后执行
           相当于window.onload=function(){}
           $(function(){});在一个文档中可以多次出现
           2.选择器
           var nav=$('.nav')
           选择所有class属性为nav的元素
           返回也是类数组对象，构造函数是jquery给所有元素绑定事件
           nav可以直接g
           nav.click（）;
           var navs=document.getEelementsByClassName('nav');
           navs是类数组对象（HTMLcollection）；
           对象可以调用构造函数原型中的方法。
           navs是类数组对象（HTMLcollection）；
           navs必须先转换成数组，在调用foreach方法逐个绑定事件
        jQuery对象转换为dom对象
            var dom2=$[dom1] 获取第二个dom对象
        dom对象转换为jQuery对象
            var $dom=$(dom);
    3.html代码片段
        var $td=$("<td><input type="checkbox" value="" ></td>");
    事件
    .on();绑定一个事件
    .off();解绑一个事件
    简写&dom.click(function(){});
       $don.submit();
    .event.preventDefault();阻止事件默认行为
    .event.stopPropagation();阻止冒泡
    Ajax
        jquery.getJSON(url,[data],[function]);
        &.getJSON("student/findALL",function(data){
            var item=[];
            &.each(data,function(key,val){
                item.push("<li id='"+key+"'>"+val+);
            });
            &("<ul/",{
                "class":"mv-new-list",
                html:item.join("")
            }).appendTo("body");
        });
        jquery.post(url.[data],[function],[jsion]);
        &.ajxt({
            url:'',
            data:'',
            dataType:'',
            type:'',
            success:function(){}
        })
